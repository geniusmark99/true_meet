"use client";

import React, { useEffect, useRef } from "react";
import { motion } from "framer-motion";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";

// NOTE: Ensure Tailwind is set up in your project and add this to your global CSS once:
// import "locomotive-scroll/dist/locomotive-scroll.css";

export default function SmoothScrollShowcase() {
    const containerRef = useRef<HTMLDivElement | null>(null);
    const locoRef = useRef<any>(null);

    useEffect(() => {
        let ctx: gsap.Context | undefined;
        let Scroll: any;

        const init = async () => {
            // Dynamically import Locomotive to avoid SSR issues
            const LocomotiveScroll = (await import("locomotive-scroll")).default as any;

            // Register ScrollTrigger
            if (!gsap.core.globals().ScrollTrigger) gsap.registerPlugin(ScrollTrigger);

            // Create instance
            Scroll = new LocomotiveScroll({
                el: containerRef.current,
                smooth: true,
                multiplier: 1,
                lerp: 0.08,
                smartphone: { smooth: true },
                tablet: { smooth: true },
            });

            // Keep a reference for cleanup
            locoRef.current = Scroll;

            // --- GSAP <-> Locomotive wiring ---
            ScrollTrigger.scrollerProxy(containerRef.current!, {
                scrollTop(value) {
                    if (arguments.length) {
                        Scroll.scrollTo(value, { duration: 0, disableLerp: true });
                    }
                    return Scroll.scroll.instance.scroll.y;
                },
                getBoundingClientRect() {
                    return { top: 0, left: 0, width: window.innerWidth, height: window.innerHeight };
                },
                pinType: containerRef.current!.style.transform ? "transform" : "fixed",
            });

            // Refresh Locomotive on ScrollTrigger update
            Scroll.on("scroll", ScrollTrigger.update);

            ctx = gsap.context(() => {
                // Hero heading subtle scale on scroll
                gsap.to("#heroTitle", {
                    scale: 1.1,
                    yPercent: -5,
                    ease: "none",
                    scrollTrigger: {
                        trigger: "#hero",
                        start: "top top",
                        end: "+=60%",
                        scrub: true,
                        scroller: containerRef.current!,
                    },
                });

                // Stagger in reveal cards
                gsap.utils.toArray<HTMLElement>(".reveal").forEach((el, i) => {
                    gsap.fromTo(
                        el,
                        { y: 60, opacity: 0, scale: 0.95 },
                        {
                            y: 0,
                            opacity: 1,
                            scale: 1,
                            duration: 0.8,
                            ease: "power3.out",
                            scrollTrigger: {
                                trigger: el,
                                start: "top 85%",
                                end: "top 40%",
                                scrub: false,
                                scroller: containerRef.current!,
                            },
                        }
                    );
                });

                // Parallax images using translateY
                gsap.utils.toArray<HTMLElement>("[data-parallax]").forEach((el) => {
                    gsap.fromTo(
                        el,
                        { yPercent: -10 },
                        {
                            yPercent: 10,
                            ease: "none",
                            scrollTrigger: {
                                trigger: el.parentElement as Element,
                                start: "top bottom",
                                end: "bottom top",
                                scrub: true,
                                scroller: containerRef.current!,
                            },
                        }
                    );
                });
            }, containerRef);

            // After everything is set, refresh
            ScrollTrigger.addEventListener("refresh", () => Scroll.update());
            ScrollTrigger.refresh();
        };

        init();

        return () => {
            ctx?.revert();
            ScrollTrigger.killAll(false);
            if (locoRef.current) {
                try { locoRef.current.destroy(); } catch (e) { }
                locoRef.current = null;
            }
        };
    }, []);

    // Framer variants for initial load
    const fadeInUp = {
        initial: { opacity: 0, y: 24 },
        animate: { opacity: 1, y: 0, transition: { duration: 0.8, ease: [0.22, 1, 0.36, 1] } },
    };

    return (
        <div className="relative min-h-screen bg-neutral-950 text-neutral-100">
            {/* Smooth-scroll container for Locomotive */}
            <div id="scroll-container" ref={containerRef} data-scroll-container>
                {/* HERO */}
                <section
                    id="hero"
                    className="relative h-[90vh] md:h-[110vh] flex items-center overflow-hidden"
                >
                    <motion.div
                        className="container mx-auto px-4 md:px-8"
                        initial="initial"
                        animate="animate"
                        variants={fadeInUp}
                    >
                        <p className="uppercase tracking-widest text-xs md:text-sm text-neutral-400 mb-4">
                            Smooth Scroll • Scale • Translate
                        </p>
                        <h1
                            id="heroTitle"
                            className="text-4xl md:text-7xl font-black leading-tight tracking-tight"
                        >
                            Locomotive + GSAP + Framer
                        </h1>
                        <p className="mt-6 max-w-xl text-neutral-300 text-sm md:text-base">
                            Production-ready starter showcasing silky smooth scrolling with Locomotive, GSAP ScrollTrigger
                            driven scale/translate effects, and tasteful Framer Motion entrance animations — all in TypeScript
                            with TailwindCSS.
                        </p>
                        <div className="mt-8 flex gap-3">
                            <a
                                href="#section-1"
                                data-scroll-to
                                className="rounded-2xl px-5 py-3 bg-white/10 hover:bg-white/20 backdrop-blur transition border border-white/10"
                            >
                                Explore
                            </a>
                            <a
                                href="#credits"
                                data-scroll-to
                                className="rounded-2xl px-5 py-3 border border-white/20 hover:border-white/50 transition"
                            >
                                Credits
                            </a>
                        </div>
                    </motion.div>

                    {/* Parallax background accents */}
                    <div className="pointer-events-none absolute inset-0">
                        <div className="absolute -right-24 top-10 w-64 h-64 md:w-96 md:h-96 rounded-full bg-indigo-500/20 blur-3xl" data-parallax />
                        <div className="absolute -left-24 bottom-10 w-64 h-64 md:w-96 md:h-96 rounded-full bg-fuchsia-500/20 blur-3xl" data-parallax />
                    </div>
                </section>

                {/* SECTION 1: Cards that reveal on scroll */}
                <section id="section-1" className="py-24 md:py-36 bg-neutral-950">
                    <div className="container mx-auto px-4 md:px-8">
                        <div className="mb-12">
                            <h2 className="text-2xl md:text-4xl font-bold">Scroll-triggered reveals</h2>
                            <p className="mt-3 text-neutral-400 max-w-2xl">
                                Cards reveal with translate and scale easing as they enter the viewport.
                            </p>
                        </div>

                        <div className="grid md:grid-cols-3 gap-6">
                            {[1, 2, 3, 4, 5, 6].map((n) => (
                                <div
                                    key={n}
                                    className="reveal rounded-2xl p-6 bg-neutral-900/60 border border-white/10 backdrop-blur"
                                >
                                    <div className="h-40 rounded-xl bg-gradient-to-br from-indigo-500/20 to-fuchsia-500/10 mb-4" />
                                    <h3 className="text-lg font-semibold">Card {n}</h3>
                                    <p className="text-sm text-neutral-400 mt-2">
                                        Subtle entrance: y → 0, opacity → 1, scale → 1.
                                    </p>
                                </div>
                            ))}
                        </div>
                    </div>
                </section>

                {/* SECTION 2: Parallax panel */}
                <section className="py-24 md:py-36 bg-neutral-925">
                    <div className="container mx-auto px-4 md:px-8">
                        <div className="grid md:grid-cols-2 gap-10 items-center">
                            <div className="relative overflow-hidden rounded-3xl border border-white/10">
                                <div className="aspect-[4/3] w-full bg-neutral-900">
                                    <div className="h-full w-full" data-parallax>
                                        <div className="h-full w-full bg-[radial-gradient(circle_at_30%_30%,rgba(99,102,241,0.25),transparent_60%),radial-gradient(circle_at_70%_70%,rgba(236,72,153,0.2),transparent_60%)]" />
                                    </div>
                                </div>
                            </div>
                            <div>
                                <h2 className="text-2xl md:text-4xl font-bold">Parallax translate</h2>
                                <p className="mt-3 text-neutral-400">
                                    The image translates vertically as you scroll, wired via GSAP ScrollTrigger for buttery control.
                                </p>
                                <ul className="mt-6 space-y-2 text-neutral-300 text-sm">
                                    <li>• Locomotive for smooth momentum scrolling</li>
                                    <li>• GSAP ScrollTrigger for precise scroll timelines</li>
                                    <li>• Framer Motion for initial and interactive micro-animations</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </section>

                {/* SECTION 3: Pinned headline that scales */}
                <section className="py-24 md:py-36 bg-neutral-950">
                    <div className="container mx-auto px-4 md:px-8">
                        <div className="relative">
                            <h2 className="text-4xl md:text-7xl font-black leading-none">
                                Pinned & Scaled Headline
                            </h2>
                            <p className="mt-4 max-w-2xl text-neutral-400">
                                As you scroll, the headline gently scales and lifts using a scrubbed timeline synced to the scroller.
                            </p>
                        </div>
                    </div>
                </section>

                {/* FOOTER / CREDITS */}
                <footer id="credits" className="py-20 border-t border-white/10 bg-neutral-950">
                    <div className="container mx-auto px-4 md:px-8">
                        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-6">
                            <div>
                                <h3 className="text-lg font-semibold">Ready to integrate</h3>
                                <p className="text-neutral-400 text-sm mt-1">
                                    Drop this component into a Next.js app router page (app/page.tsx). Ensure Tailwind is configured and the
                                    Locomotive CSS import is added to your globals.
                                </p>
                            </div>
                            <a
                                href="#hero"
                                data-scroll-to
                                className="inline-flex items-center justify-center rounded-2xl px-5 py-3 border border-white/20 hover:border-white/50 transition"
                            >
                                Back to top
                            </a>
                        </div>
                    </div>
                </footer>
            </div>

            {/* Subtle fixed gradient vignette */}
            <div className="pointer-events-none fixed inset-0 bg-[radial-gradient(50%_50%_at_50%_50%,rgba(255,255,255,0.06)_0%,rgba(0,0,0,0)_70%)]" />
        </div>
    );
}
